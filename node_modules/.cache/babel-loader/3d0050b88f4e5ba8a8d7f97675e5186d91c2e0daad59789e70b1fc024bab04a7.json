{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","createGetCssVar","prefix","appendVar","vars","length","match","slice","getCssVar","field","fallbacks"],"sources":["/Users/enigma/Documents/buildr-frontend/node_modules/@mui/joy/node_modules/@mui/system/node/cssVars/createGetCssVar.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,eAAe;AACjC;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAACC,MAAM,GAAG,EAAE,EAAE;EACpC,SAASC,SAASA,CAAC,GAAGC,IAAI,EAAE;IAC1B,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IACA,MAAMN,KAAK,GAAGK,IAAI,CAAC,CAAC,CAAC;IACrB,IAAI,OAAOL,KAAK,KAAK,QAAQ,IAAI,CAACA,KAAK,CAACO,KAAK,CAAC,6GAA6G,CAAC,EAAE;MAC5J,OAAO,WAAWJ,MAAM,GAAG,GAAGA,MAAM,GAAG,GAAG,EAAE,GAAGH,KAAK,GAAGI,SAAS,CAAC,GAAGC,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG;IACvF;IACA,OAAO,KAAKR,KAAK,EAAE;EACrB;;EAEA;EACA,MAAMS,SAAS,GAAGA,CAACC,KAAK,EAAE,GAAGC,SAAS,KAAK;IACzC,OAAO,SAASR,MAAM,GAAG,GAAGA,MAAM,GAAG,GAAG,EAAE,GAAGO,KAAK,GAAGN,SAAS,CAAC,GAAGO,SAAS,CAAC,GAAG;EACjF,CAAC;EACD,OAAOF,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}